from flexible_size_systems import Markov_flex_sys_flex_env
import csv
import numpy as np
from generating_matrices import generate_random_matrix
import sys
"""
IMPORTANT: environment size is 2. 10:30 am- just practice right now with 2 sims,
 once it works run with 1000 
"""


def func(number_of_sims: int, env_size: int, file_name: str):
    """
    for set 1: 
        Broken DB
        weak coupling
        non 0 stored info 
    """
    with open(file_name, "w") as file:
        writer = csv.writer(file)
        header_1 = ['states in environment: ' + str(env_size)]
        header_2 = ["example #", "theoretical SI", "SI using MI formula", "SI using simluated steady state time slice", "2", "3" "4", "5", "6", "7", "8", "9", "10"] 
        writer.writerow(header_1)
        writer.writerow(header_2)
        print("hi")

        row = []
        randomly_generated_env_size_x = [generate_random_matrix(env_size) for i in range(10)]
        for i in range(1):            
            s = 0
            while s < number_of_sims:
                row = []
                row.append("example: " + str(i + 1))
                trajectory = Markov_flex_sys_flex_env(randomly_generated_env_size_x[i], generate_random_matrix(2), generate_random_matrix(2), p_t3=generate_random_matrix(2), p_t4= generate_random_matrix(2), p_t5=generate_random_matrix(2)) # abritrary system states here 
                row.append(trajectory.stored_information())
                trajectory.generate_ensemble(1000)
                trajectory.calculate_probs()
                row.append(trajectory.verify_stored_information_mi())
                row.append(trajectory.verify_stored_information_steady_state())

                trajectory_two = Markov_flex_sys_flex_env(randomly_generated_env_size_x[i], np.array([[.9, .1], [.9, .1]]), np.array([[.9, .1], [.9, .1]]), p_t3= np.array([[.9, .1], [.9, .1]]), p_t4= np.array([[.1, .9], [.1, .9]]), p_t5= np.array([[.1, .9], [.1, .9]]))
                trajectory_two.generate_ensemble(1000)
                trajectory_two.calculate_probs()
                trajectory_two.I_pred_one_step()
                row.append(sum(np.array(trajectory_two.I_pred_one_step()[50:])[np.isfinite(trajectory_two.I_pred_one_step()[50:])])/len(np.array(trajectory_two.I_pred_one_step()[50:])[np.isfinite(trajectory_two.I_pred_one_step()[50:])]))

                trajectory_three = Markov_flex_sys_flex_env(randomly_generated_env_size_x[i], np.array([[.9, .05, .05], [.9, .05, .05], [.9, .05, .05]]), np.array([[.9, .05, .05], [.9, .05, .05], [.9, .05, .05]]), \
                    p_t3= np.array([[.05, .9, .05], [.05, .9, .05], [.05, .9, .05]]), p_t4= np.array([[.05, .9, .05], [.05, .9, .05], [.05, .9, .05]]), p_t5= np.array([[.05, .05, .9], [.05, .05, .9], [.05, .05, .9]]))
                trajectory_three.generate_ensemble(1000)
                trajectory_three.calculate_probs()
                trajectory_three.I_pred_one_step()
                row.append(sum(np.array(trajectory_three.I_pred_one_step()[50:])[np.isfinite(trajectory_three.I_pred_one_step()[50:])])/len(np.array(trajectory_three.I_pred_one_step()[50:])[np.isfinite(trajectory_three.I_pred_one_step()[50:])]))

                trajectory_four = Markov_flex_sys_flex_env(randomly_generated_env_size_x[i], np.array([[.9, 1/30, 1/30, 1/30], [.9, 1/30, 1/30, 1/30], [.9, 1/30, 1/30, 1/30], [.9, 1/30, 1/30, 1/30]]), np.array([[.9, 1/30, 1/30, 1/30], [.9, 1/30, 1/30, 1/30], [.9, 1/30, 1/30, 1/30], [.9, 1/30, 1/30, 1/30]]), \
                    p_t3= np.array([[1/30, .9, 1/30, 1/30], [1/30, .9, 1/30, 1/30], [1/30, .9, 1/30, 1/30], [1/30, .9, 1/30, 1/30]]), p_t4= np.array([[1/30, 1/30, .9, 1/30], [1/30, 1/30, .9, 1/30], [1/30, 1/30, .9, 1/30], [1/30, 1/30, .9, 1/30]]), p_t5= np.array([[1/30, 1/30, 1/30, .9], [1/30, 1/30, 1/30, .9], [1/30, 1/30, 1/30, .9], [1/30, 1/30, 1/30, .9]]))
                trajectory_four.generate_ensemble(1000)
                trajectory_four.calculate_probs()
                trajectory_four.I_pred_one_step()
                row.append(sum(np.array(trajectory_four.I_pred_one_step()[50:])[np.isfinite(trajectory_four.I_pred_one_step()[50:])])/len(np.array(trajectory_four.I_pred_one_step()[50:])[np.isfinite(trajectory_four.I_pred_one_step()[50:])]))

                trajectory_five = Markov_flex_sys_flex_env(randomly_generated_env_size_x[i],np.array([[.9, 1/40, 1/40, 1/40, 1/40], [.9, 1/40, 1/40, 1/40, 1/40], [.9, 1/40, 1/40, 1/40, 1/40], [.9, 1/40, 1/40, 1/40, 1/40], [.9, 1/40, 1/40, 1/40, 1/40]]), \
                    np.array([[1/40, .9, 1/40, 1/40, 1/40], [1/40, .9, 1/40, 1/40, 1/40], [1/40, .9, 1/40, 1/40, 1/40], [1/40, .9, 1/40, 1/40, 1/40], [1/40, .9, 1/40, 1/40, 1/40]]), \
                        p_t3 = np.array([[1/40, 1/40, .9, 1/40, 1/40], [1/40, 1/40, .9, 1/40, 1/40], [1/40, 1/40, .9, 1/40, 1/40], [1/40, 1/40, .9, 1/40, 1/40], [1/40, 1/40, .9, 1/40, 1/40]]), \
                            p_t4 = np.array([[1/40, 1/40, 1/40, .9, 1/40], [1/40, 1/40, 1/40, .9, 1/40], [1/40, 1/40, 1/40, .9, 1/40], [1/40, 1/40, 1/40, .9, 1/40], [1/40, 1/40, 1/40, .9, 1/40]]), \
                                p_t5 = np.array([[1/40, 1/40, 1/40, 1/40, .9], [1/40, 1/40, 1/40, 1/40, .9], [1/40, 1/40, 1/40, 1/40, .9], [1/40, 1/40, 1/40, 1/40, .9], [1/40, 1/40, 1/40, 1/40, .9]]))
                trajectory_five.generate_ensemble(1000)
                trajectory_five.calculate_probs()
                trajectory_five.I_pred_one_step()
                row.append(sum(np.array(trajectory_five.I_pred_one_step()[50:])[np.isfinite(trajectory_five.I_pred_one_step()[50:])])/len(np.array(trajectory_five.I_pred_one_step()[50:])[np.isfinite(trajectory_five.I_pred_one_step()[50:])]))

                # essentially "ignoring" one of more of the system states
                trajectory_six = Markov_flex_sys_flex_env(randomly_generated_env_size_x[i], np.array([[.9, 1/50, 1/50, 1/50, 1/50, 1/50], [.9, 1/50, 1/50, 1/50, 1/50, 1/50], [.9, 1/50, 1/50, 1/50, 1/50, 1/50], [.9, 1/50, 1/50, 1/50, 1/50, 1/50], [.9, 1/50, 1/50, 1/50, 1/50, 1/50], [.9, 1/50, 1/50, 1/50, 1/50, 1/50]]), \
                    np.array([[1/50, .9, 1/50, 1/50, 1/50, 1/50], [1/50, .9, 1/50, 1/50, 1/50, 1/50], [1/50, .9, 1/50, 1/50, 1/50, 1/50], [1/50, .9, 1/50, 1/50, 1/50, 1/50], [1/50, .9, 1/50, 1/50, 1/50, 1/50], [1/50, .9, 1/50, 1/50, 1/50, 1/50]]), \
                        p_t3 = np.array([[1/50, 1/50, .9, 1/50, 1/50, 1/50], [1/50, 1/50, .9, 1/50, 1/50, 1/50], [1/50, 1/50, .9, 1/50, 1/50, 1/50], [1/50, 1/50, .9, 1/50, 1/50, 1/50], [1/50, 1/50, .9, 1/50, 1/50, 1/50], [1/50, 1/50, .9, 1/50, 1/50, 1/50]]), \
                            p_t4 = np.array([[1/50, 1/50, 1/50, .9, 1/50, 1/50], [1/50, 1/50, 1/50, .9, 1/50, 1/50], [1/50, 1/50, 1/50, .9, 1/50, 1/50], [1/50, 1/50, 1/50, .9, 1/50, 1/50], [1/50, 1/50, 1/50, .9, 1/50, 1/50], [1/50, 1/50, 1/50, .9, 1/50, 1/50]]), \
                                p_t5 = np.array([[1/50, 1/50, 1/50, 1/50, .9, 1/50], [1/50, 1/50, 1/50, 1/50, .9, 1/50], [1/50, 1/50, 1/50, 1/50, .9, 1/50], [1/50, 1/50, 1/50, 1/50, .9, 1/50], [1/50, 1/50, 1/50, 1/50, .9, 1/50], [1/50, 1/50, 1/50, 1/50, .9, 1/50]]))
                trajectory_six.generate_ensemble(1000)
                trajectory_six.calculate_probs()
                trajectory_six.I_pred_one_step()
                row.append(sum(np.array(trajectory_six.I_pred_one_step()[50:])[np.isfinite(trajectory_six.I_pred_one_step()[50:])])/len(np.array(trajectory_six.I_pred_one_step()[50:])[np.isfinite(trajectory_six.I_pred_one_step()[50:])]))

                trajectory_seven = Markov_flex_sys_flex_env(randomly_generated_env_size_x[i], np.array([[.9, 1/60, 1/60, 1/60, 1/60, 1/60, 1/60], [.9, 1/60, 1/60, 1/60, 1/60, 1/60, 1/60], [.9, 1/60, 1/60, 1/60, 1/60, 1/60, 1/60], [.9, 1/60, 1/60, 1/60, 1/60, 1/60, 1/60], [.9, 1/60, 1/60, 1/60, 1/60, 1/60, 1/60], [.9, 1/60, 1/60, 1/60, 1/60, 1/60, 1/60], [.9, 1/60, 1/60, 1/60, 1/60, 1/60, 1/60]]), \
                    np.array([[1/60, .9, 1/60, 1/60, 1/60, 1/60, 1/60], [1/60, .9, 1/60, 1/60, 1/60, 1/60, 1/60], [1/60, .9, 1/60, 1/60, 1/60, 1/60, 1/60], [1/60, .9, 1/60, 1/60, 1/60, 1/60, 1/60], [1/60, .9, 1/60, 1/60, 1/60, 1/60, 1/60], [1/60, .9, 1/60, 1/60, 1/60, 1/60, 1/60], [1/60, .9, 1/60, 1/60, 1/60, 1/60, 1/60]]), \
                        p_t3 = np.array([[1/60, 1/60, .9, 1/60, 1/60, 1/60, 1/60], [1/60, 1/60, .9, 1/60, 1/60, 1/60, 1/60], [1/60, 1/60, .9, 1/60, 1/60, 1/60, 1/60], [1/60, 1/60, .9, 1/60, 1/60, 1/60, 1/60], [1/60, 1/60, .9, 1/60, 1/60, 1/60, 1/60], [1/60, 1/60, .9, 1/60, 1/60, 1/60, 1/60], [1/60, 1/60, .9, 1/60, 1/60, 1/60, 1/60]]), \
                            p_t4 = np.array([[1/60, 1/60, 1/60, .9, 1/60, 1/60, 1/60], [1/60, 1/60, 1/60, .9, 1/60, 1/60, 1/60], [1/60, 1/60, 1/60, .9, 1/60, 1/60, 1/60], [1/60, 1/60, 1/60, .9, 1/60, 1/60, 1/60], [1/60, 1/60, 1/60, .9, 1/60, 1/60, 1/60], [1/60, 1/60, 1/60, .9, 1/60, 1/60, 1/60], [1/60, 1/60, 1/60, .9, 1/60, 1/60, 1/60]]), \
                                p_t5 = np.array([[1/60, 1/60, 1/60, 1/60, .9, 1/60, 1/60], [1/60, 1/60, 1/60, 1/60, .9, 1/60, 1/60], [1/60, 1/60, 1/60, 1/60, .9, 1/60, 1/60], [1/60, 1/60, 1/60, 1/60, .9, 1/60, 1/60], [1/60, 1/60, 1/60, 1/60, .9, 1/60, 1/60], [1/60, 1/60, 1/60, 1/60, .9, 1/60, 1/60], [1/60, 1/60, 1/60, 1/60, .9, 1/60, 1/60]]))
                trajectory_seven.generate_ensemble(1000)
                trajectory_seven.calculate_probs()
                trajectory_seven.I_pred_one_step()
                row.append(sum(np.array(trajectory_seven.I_pred_one_step()[50:])[np.isfinite(trajectory_seven.I_pred_one_step()[50:])])/len(np.array(trajectory_seven.I_pred_one_step()[50:])[np.isfinite(trajectory_seven.I_pred_one_step()[50:])]))

                trajectory_eight = Markov_flex_sys_flex_env(randomly_generated_env_size_x[i], np.array([[.9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [.9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [.9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [.9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [.9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [.9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [.9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [.9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70]]), \
                    np.array([[1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70, 1/70]]), \
                        p_t3 = np.array([[1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70, 1/70]]), \
                            p_t4 = np.array([[1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70, 1/70]]), \
                                p_t5 = np.array([[1/70, 1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70], [1/70, 1/70, 1/70, 1/70, .9, 1/70, 1/70, 1/70]]))
                trajectory_eight.generate_ensemble(1000)
                trajectory_eight.calculate_probs()
                trajectory_eight.I_pred_one_step()
                row.append(sum(np.array(trajectory_eight.I_pred_one_step()[50:])[np.isfinite(trajectory_eight.I_pred_one_step()[50:])])/len(np.array(trajectory_eight.I_pred_one_step()[50:])[np.isfinite(trajectory_eight.I_pred_one_step()[50:])]))

                trajectory_nine = Markov_flex_sys_flex_env(randomly_generated_env_size_x[i], np.array([[.9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [.9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [.9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [.9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [.9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [.9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [.9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [.9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [.9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80]]), \
                    np.array([[1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80]]), \
                        p_t3 = np.array([[1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80, 1/80]]), \
                            p_t4 = np.array([[1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80, 1/80]]), \
                                p_t5 = np.array([[1/80, 1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80], [1/80, 1/80, 1/80, 1/80, .9, 1/80, 1/80, 1/80, 1/80]]))
                trajectory_nine.generate_ensemble(1000)
                trajectory_nine.calculate_probs()
                trajectory_nine.I_pred_one_step()
                row.append(sum(np.array(trajectory_nine.I_pred_one_step()[50:])[np.isfinite(trajectory_nine.I_pred_one_step()[50:])])/len(np.array(trajectory_nine.I_pred_one_step()[50:])[np.isfinite(trajectory_nine.I_pred_one_step()[50:])]))

                trajectory_ten = Markov_flex_sys_flex_env(randomly_generated_env_size_x[i], np.array([[.9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [.9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [.9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [.9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [.9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [.9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [.9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [.9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [.9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [.9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90]]), \
                    np.array([[1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90]]), \
                        p_t3 = np.array([[1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90]]), \
                            p_t4 = np.array([[1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90, 1/90]]), \
                                p_t5 = np.array([[1/90, 1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90], [1/90, 1/90, 1/90, 1/90, .9, 1/90, 1/90, 1/90, 1/90, 1/90]]))
                trajectory_ten.generate_ensemble(1000)
                trajectory_ten.calculate_probs()
                trajectory_ten.I_pred_one_step()
                row.append(sum(np.array(trajectory_ten.I_pred_one_step()[50:])[np.isfinite(trajectory_ten.I_pred_one_step()[50:])])/len(np.array(trajectory_ten.I_pred_one_step()[50:])[np.isfinite(trajectory_ten.I_pred_one_step()[50:])]))

                s = s + 1
                writer.writerow(row) # indented this once


file_name = "8_8_5_state_nonzero_si_strong_coupling_"  + sys.argv[1] + ".csv"
func(100, 5, file_name)